set-option -add global ui_options terminal_assistant=cat

#colorscheme solarized-dark
#colorscheme solarized-light
colorscheme one-light

hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
}}
map global normal P '!xsel --output --clipboard<ret>'
map global normal p '<a-!>xsel --output --clipboard<ret>'
map global normal R '|xsel --output --clipboard<ret>'

# gromacs config files are not c source.
hook global BufCreate .*\.(itp|top) %{ set buffer filetype plain ; set buffer tabstop 8 }

eval %sh{kak-lsp --kakoune -s $kak_session -c ~/.config/kak-lsp/kak-lsp.toml}
lsp-enable
set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces -indent â‹…
add-highlighter global/ number-lines -relative
add-highlighter global/ column 80 StatusLine

set global tabstop 4
set global indentwidth 4

hook global BufOpenFile .* editorconfig-load
hook global BufNewFile .* editorconfig-load

set global startup_info_version -1

# USERMODE BINDINGS
# -----------------

map global user e ':lsp-find-error --include-warnings<ret>' -docstring 'find lsp error'
map global user h ':lsp-hover<ret>' -docstring 'lsp hover'
map global user m ':lsp-highlight-references<ret>' -docstring 'lsp highlight references'
map global user k '<a-a>w:man<ret>' -docstring 'man page'
map global user d ':db<ret>' -docstring 'delete buffer'
map global user / ':comment-line<ret>' -docstring 'comment'
map global user a '|unidecode<ret>' -docstring 'unidecode'
#map global user f 'x|par w79<ret>' -docstring 'fold lines to 79 characters'
map global user f ':format-selections<ret>'
map global user q 'x|sed -E "s/^(| )?/> /"<ret>|par w79<ret>' -docstring 'quote'
map global user | 'Z<a-s>i|<space><esc>zx'
map global user l %{x|awk '{printf("%02d| %s\n", ++x, $0)}'<ret>} -docstring 'line numbers'
#map global user l %{xZ<a-s>i<c-r>#| <esc>hh<a-h><a-;>&<a-h>zx} -docstring 'line numbers'
map global user u 'xypHr-' -docstring 'underline'
map global user c 'x|center<ret>' -docstring 'center'
define-command -params 1 insert-image %{echo %sh{scrot -s -o $1}; execute-keys "o!IMAGE %arg{1}<esc>"}
map global user i ':insert-image '
map global user p ':set buffer filetype plain<ret>'

define-command tw %{
    hook buffer BufWritePost '.*' %{
        nop %sh{ { tw -o "${kak_buffile}.pdf" < $kak_buffile ; } >/dev/null 2>&1 & }
    }
    nop %sh{ tw -o "${kak_buffile}.pdf" < $kak_buffile ; { zathura "${kak_buffile}.pdf" ; } >/dev/null 2>&1 &}
}

define-command pyentr %{
    tmux-terminal-horizontal "echo %val{buffile} | entr -c python3 %val{buffile}"
}

# How can I make it so that the new text is selected?
define-command lorem-ipsum %{
  execute-keys "i%{
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin eu convallis
neque. Phasellus varius efficitur lacus ut sodales. Aenean pellentesque ut dui
ut dapibus. Phasellus eros nisl, accumsan nec malesuada at, luctus aliquet
diam. Mauris ac velit quis felis pellentesque placerat. Vivamus condimentum
eget massa eget tempus. Duis luctus finibus tellus, quis lacinia metus
vestibulum a. Donec viverra ullamcorper dui in cursus. Donec sapien est,
aliquam vel velit nec, ultricies gravida ante. Etiam bibendum dui rhoncus,
pharetra augue id, venenatis lectus. Vestibulum pretium finibus nisi, quis
molestie est accumsan a. Sed id purus id ipsum consequat volutpat eu at
mi. Sed euismod tincidunt eros. Donec ac turpis eu eros condimentum laoreet
non ut neque. Quisque vel congue enim, id iaculis lectus. Quisque pretium,
metus id egestas auctor, ex elit sodales elit, a luctus turpis orci nec velit.
}<esc>"
}
